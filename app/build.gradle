buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        //noinspection GradleDynamicVersion
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}


android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        applicationId "com.wesine.opencv320"
        minSdkVersion 21
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    lintOptions {
        abortOnError false
    }

    defaultConfig {
        multiDexEnabled true
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/notice'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license'
        exclude 'META-INF/license.txt'
    }

    dexOptions {

        jumboMode true
        javaMaxHeapSize "4g"

    }

}

dependencies {
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':OpenCVLibrary320')
    //camera
    compile "com.android.support:support-v4:27.1.0"
    compile "com.android.support:support-v13:27.1.0"
    compile "com.android.support:cardview-v7:27.1.0"
//    testCompile 'junit:junit:4.12'

    compile('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true;
    }
    compile "com.android.support:multidex:1.0.3"


//    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    }

//    compile fileTree(dir: "$buildDir/native-libs",include: 'native-libs.jar')

}

//task nativeLibsToJar(type: Jar,description:'create a jar archive of the native libs'){
//    destinationDir file("$buildDir/native-libs")
//    baseName 'native-libs'
//    from fileTree(dir: 'libs',include: '**/*.so')
//    into 'lib/'
//}
//tasks.withType(JavaCompile){
//    compileTask -> compileTask.dependsOn(nativeLibsToJar)
//}
